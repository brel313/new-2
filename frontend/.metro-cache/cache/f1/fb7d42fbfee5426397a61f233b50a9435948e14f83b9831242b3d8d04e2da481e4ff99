{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":66,"index":66}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExpoHaptics","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":68},"end":{"line":3,"column":40,"index":108}}],"key":"3WqQQRS5WG7zFWoPm3OZ82Alno4=","exportNames":["*"]}},{"name":"./Haptics.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":109},"end":{"line":4,"column":96,"index":205}}],"key":"4K2GreqvhWei0+qUJVORf63x8ww=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"AndroidHaptics\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.AndroidHaptics;\n    }\n  });\n  Object.defineProperty(exports, \"ImpactFeedbackStyle\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.ImpactFeedbackStyle;\n    }\n  });\n  Object.defineProperty(exports, \"NotificationFeedbackType\", {\n    enumerable: true,\n    get: function () {\n      return _Haptics.NotificationFeedbackType;\n    }\n  });\n  exports.impactAsync = impactAsync;\n  exports.notificationAsync = notificationAsync;\n  exports.performAndroidHapticsAsync = performAndroidHapticsAsync;\n  exports.selectionAsync = selectionAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoHaptics = _interopRequireDefault(require(_dependencyMap[2], \"./ExpoHaptics\"));\n  var _Haptics = require(_dependencyMap[3], \"./Haptics.types\");\n  // @needsAudit\n  /**\n   * The kind of notification response used in the feedback.\n   * @param type A notification feedback type that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n   * and iOS is directly mapped to [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype).\n   * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n   * @return A `Promise` which fulfills once native size haptics functionality is triggered.\n   */\n  async function notificationAsync(type = _Haptics.NotificationFeedbackType.Success) {\n    if (!_ExpoHaptics.default?.notificationAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptics', 'notificationAsync');\n    }\n    await _ExpoHaptics.default.notificationAsync(type);\n  }\n\n  // @needsAudit\n  /**\n   * @param style A collision indicator that on Android is simulated using [`Vibrator`](https://developer.android.com/reference/android/os/Vibrator)\n   * and on iOS, it is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackgenerator/feedbackstyle).\n   * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy, Rigid, Soft}`.\n   * @return A `Promise` which fulfills once native size haptics functionality is triggered.\n   * @see Android's `Vibrator` API is not recommended for implementing haptics feedback. **Instead, you should use\n   * [`performAndroidHapticsAsync`](#hapticsperformandroidhapticsasynctype), which is similar to iOS haptic feedback and does not require\n   * `VIBRATE` permission.**\n   */\n  async function impactAsync(style = _Haptics.ImpactFeedbackStyle.Medium) {\n    if (!_ExpoHaptics.default?.impactAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptic', 'impactAsync');\n    }\n    await _ExpoHaptics.default.impactAsync(style);\n  }\n\n  // @needsAudit\n  /**\n   * Used to let a user know when a selection change has been registered.\n   * @return A `Promise` which fulfills once native size haptics functionality is triggered.\n   */\n  async function selectionAsync() {\n    if (!_ExpoHaptics.default?.selectionAsync) {\n      throw new _expoModulesCore.UnavailabilityError('Haptic', 'selectionAsync');\n    }\n    await _ExpoHaptics.default.selectionAsync();\n  }\n\n  /**\n   * Use the device haptics engine to provide physical feedback to the user.\n   *\n   * @platform android\n   */\n  async function performAndroidHapticsAsync(type) {\n    if (_expoModulesCore.Platform.OS !== 'android') {\n      return;\n    }\n    _ExpoHaptics.default.performHapticsAsync(type);\n  }\n});","lineCount":86,"map":[[28,2,1,0],[28,6,1,0,"_expoModulesCore"],[28,22,1,0],[28,25,1,0,"require"],[28,32,1,0],[28,33,1,0,"_dependencyMap"],[28,47,1,0],[29,2,3,0],[29,6,3,0,"_ExpoHaptics"],[29,18,3,0],[29,21,3,0,"_interopRequireDefault"],[29,43,3,0],[29,44,3,0,"require"],[29,51,3,0],[29,52,3,0,"_dependencyMap"],[29,66,3,0],[30,2,4,0],[30,6,4,0,"_Haptics"],[30,14,4,0],[30,17,4,0,"require"],[30,24,4,0],[30,25,4,0,"_dependencyMap"],[30,39,4,0],[31,2,6,0],[32,2,7,0],[33,0,8,0],[34,0,9,0],[35,0,10,0],[36,0,11,0],[37,0,12,0],[38,0,13,0],[39,2,14,7],[39,17,14,22,"notificationAsync"],[39,34,14,39,"notificationAsync"],[39,35,15,2,"type"],[39,39,15,32],[39,42,15,35,"NotificationFeedbackType"],[39,75,15,59],[39,76,15,60,"Success"],[39,83,15,67],[39,85,16,17],[40,4,17,2],[40,8,17,6],[40,9,17,7,"ExpoHaptics"],[40,29,17,18],[40,31,17,20,"notificationAsync"],[40,48,17,37],[40,50,17,39],[41,6,18,4],[41,12,18,10],[41,16,18,14,"UnavailabilityError"],[41,52,18,33],[41,53,18,34],[41,62,18,43],[41,64,18,45],[41,83,18,64],[41,84,18,65],[42,4,19,2],[43,4,20,2],[43,10,20,8,"ExpoHaptics"],[43,30,20,19],[43,31,20,20,"notificationAsync"],[43,48,20,37],[43,49,20,38,"type"],[43,53,20,42],[43,54,20,43],[44,2,21,0],[46,2,23,0],[47,2,24,0],[48,0,25,0],[49,0,26,0],[50,0,27,0],[51,0,28,0],[52,0,29,0],[53,0,30,0],[54,0,31,0],[55,0,32,0],[56,2,33,7],[56,17,33,22,"impactAsync"],[56,28,33,33,"impactAsync"],[56,29,34,2,"style"],[56,34,34,28],[56,37,34,31,"ImpactFeedbackStyle"],[56,65,34,50],[56,66,34,51,"Medium"],[56,72,34,57],[56,74,35,17],[57,4,36,2],[57,8,36,6],[57,9,36,7,"ExpoHaptics"],[57,29,36,18],[57,31,36,20,"impactAsync"],[57,42,36,31],[57,44,36,33],[58,6,37,4],[58,12,37,10],[58,16,37,14,"UnavailabilityError"],[58,52,37,33],[58,53,37,34],[58,61,37,42],[58,63,37,44],[58,76,37,57],[58,77,37,58],[59,4,38,2],[60,4,39,2],[60,10,39,8,"ExpoHaptics"],[60,30,39,19],[60,31,39,20,"impactAsync"],[60,42,39,31],[60,43,39,32,"style"],[60,48,39,37],[60,49,39,38],[61,2,40,0],[63,2,42,0],[64,2,43,0],[65,0,44,0],[66,0,45,0],[67,0,46,0],[68,2,47,7],[68,17,47,22,"selectionAsync"],[68,31,47,36,"selectionAsync"],[68,32,47,36],[68,34,47,54],[69,4,48,2],[69,8,48,6],[69,9,48,7,"ExpoHaptics"],[69,29,48,18],[69,31,48,20,"selectionAsync"],[69,45,48,34],[69,47,48,36],[70,6,49,4],[70,12,49,10],[70,16,49,14,"UnavailabilityError"],[70,52,49,33],[70,53,49,34],[70,61,49,42],[70,63,49,44],[70,79,49,60],[70,80,49,61],[71,4,50,2],[72,4,51,2],[72,10,51,8,"ExpoHaptics"],[72,30,51,19],[72,31,51,20,"selectionAsync"],[72,45,51,34],[72,46,51,35],[72,47,51,36],[73,2,52,0],[75,2,54,0],[76,0,55,0],[77,0,56,0],[78,0,57,0],[79,0,58,0],[80,2,59,7],[80,17,59,22,"performAndroidHapticsAsync"],[80,43,59,48,"performAndroidHapticsAsync"],[80,44,59,49,"type"],[80,48,59,69],[80,50,59,71],[81,4,60,2],[81,8,60,6,"Platform"],[81,33,60,14],[81,34,60,15,"OS"],[81,36,60,17],[81,41,60,22],[81,50,60,31],[81,52,60,33],[82,6,61,4],[83,4,62,2],[84,4,63,2,"ExpoHaptics"],[84,24,63,13],[84,25,63,14,"performHapticsAsync"],[84,44,63,33],[84,45,63,34,"type"],[84,49,63,38],[84,50,63,39],[85,2,64,0],[86,0,64,1],[86,3]],"functionMap":{"names":["<global>","notificationAsync","impactAsync","selectionAsync","performAndroidHapticsAsync"],"mappings":"AAA;OCa;CDO;OEY;CFO;OGO;CHK;OIO;CJK"}},"type":"js/module"}]}